services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskmanager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: taskmanager
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d taskmanager"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskmanager-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taskmanager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskmanager-network

  # NestJS Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: taskmanager-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      API_PREFIX: api
      DATABASE_URL: postgresql://admin:${DB_PASSWORD:-password123}@postgres:5432/taskmanager?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_TTL: 3600
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-change-in-production}
      JWT_EXPIRATION: 15m
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret-change-in-production}
      JWT_REFRESH_EXPIRATION: 7d
      BCRYPT_ROUNDS: 10
      RATE_LIMIT_TTL: 60000
      RATE_LIMIT_MAX: 100
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
      LOG_LEVEL: debug
      LOG_DIR: ./logs
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - taskmanager-network

  # Next.js Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: taskmanager-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      # Internal API URL for server-side requests
      INTERNAL_API_URL: http://backend:3001/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - taskmanager-network

  # Prisma Studio (Optional - for database management)
  prisma-studio:
    image: node:20-alpine
    container_name: taskmanager-prisma-studio
    working_dir: /app
    command: sh -c "npm install -g prisma && npx prisma studio"
    environment:
      DATABASE_URL: postgresql://admin:${DB_PASSWORD:-password123}@postgres:5432/taskmanager?schema=public
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "5555:5555"
    depends_on:
      - postgres
    networks:
      - taskmanager-network
    profiles:
      - tools

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_node_modules:
    driver: local
  backend_logs:
    driver: local

# Networks
networks:
  taskmanager-network:
    driver: bridge
