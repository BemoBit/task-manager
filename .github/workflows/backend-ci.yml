name: Backend CI/CD

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: taskmanager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/taskmanager_test

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:cov
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/taskmanager_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/taskmanager_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'task-manager-backend'
          path: './backend'
          format: 'HTML'
          args: >
            --enableRetired
            --failOnCVSS 7

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports/

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          target: production
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-api.taskmanager.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Update Kubernetes secrets
        run: |
          kubectl create secret generic backend-secrets \
            --from-literal=database-url=${{ secrets.STAGING_DATABASE_URL }} \
            --from-literal=redis-password=${{ secrets.STAGING_REDIS_PASSWORD }} \
            --from-literal=jwt-secret=${{ secrets.STAGING_JWT_SECRET }} \
            --from-literal=jwt-refresh-secret=${{ secrets.STAGING_JWT_REFRESH_SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/backend-deployment \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n staging
          kubectl rollout status deployment/backend-deployment -n staging --timeout=5m

      - name: Run database migrations
        run: |
          kubectl run migration-${{ github.sha }} \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --restart=Never \
            --env="DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" \
            -n staging \
            -- npx prisma migrate deploy
          kubectl wait --for=condition=complete --timeout=5m job/migration-${{ github.sha }} -n staging

      - name: Run smoke tests
        run: |
          kubectl run smoke-test-${{ github.sha }} \
            --image=curlimages/curl:latest \
            --restart=Never \
            -n staging \
            -- sh -c "curl -f https://staging-api.taskmanager.io/health || exit 1"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.taskmanager.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Update Kubernetes secrets
        run: |
          kubectl create secret generic backend-secrets \
            --from-literal=database-url=${{ secrets.PRODUCTION_DATABASE_URL }} \
            --from-literal=redis-password=${{ secrets.PRODUCTION_REDIS_PASSWORD }} \
            --from-literal=jwt-secret=${{ secrets.PRODUCTION_JWT_SECRET }} \
            --from-literal=jwt-refresh-secret=${{ secrets.PRODUCTION_JWT_REFRESH_SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          kubectl set image deployment/backend-deployment-green \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n production
          kubectl rollout status deployment/backend-deployment-green -n production --timeout=10m
          
          # Run health checks
          kubectl run health-check-${{ github.sha }} \
            --image=curlimages/curl:latest \
            --restart=Never \
            -n production \
            -- sh -c "curl -f http://backend-service-green:3001/health || exit 1"
          
          # Switch traffic to green
          kubectl patch service backend-service -p '{"spec":{"selector":{"version":"green"}}}' -n production
          
          # Monitor for 5 minutes
          sleep 300
          
          # If successful, scale down blue
          kubectl scale deployment/backend-deployment-blue --replicas=0 -n production

      - name: Run database migrations
        run: |
          kubectl run migration-${{ github.sha }} \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --restart=Never \
            --env="DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" \
            -n production \
            -- npx prisma migrate deploy

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Backend deployed to production :rocket:'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
